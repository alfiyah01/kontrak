# =====================
# TRADESTATION PREMIUM - DOCKER COMPOSE CONFIGURATION
# Development and Production Environment Setup
# =====================

version: '3.8'

# Shared configuration
x-common-variables: &common-variables
  NODE_ENV: ${NODE_ENV:-production}
  TZ: Asia/Jakarta
  
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  # =====================
  # APPLICATION SERVICE
  # =====================
  tradestation-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tradestation-premium
    restart: unless-stopped
    environment:
      <<: *common-variables
      PORT: 3000
      MONGODB_URI: mongodb://mongo:27017/tradestation
      REDIS_URL: redis://redis:6379
    ports:
      - "${PORT:-3000}:3000"
    volumes:
      - ./uploads:/app/uploads
      - ./backups:/app/backups
      - ./logs:/app/logs
      - ./assets:/app/assets
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tradestation-network
    logging: *default-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # =====================
  # MONGODB DATABASE
  # =====================
  mongo:
    image: mongo:6.0
    container_name: tradestation-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-securepassword}
      MONGO_INITDB_DATABASE: tradestation
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - tradestation-network
    logging: *default-logging
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: mongod --auth --bind_ip_all

  # =====================
  # REDIS CACHE
  # =====================
  redis:
    image: redis:7-alpine
    container_name: tradestation-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - tradestation-network
    logging: *default-logging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server /usr/local/etc/redis/redis.conf

  # =====================
  # NGINX REVERSE PROXY (Production)
  # =====================
  nginx:
    image: nginx:alpine
    container_name: tradestation-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - ./public:/usr/share/nginx/html:ro
    depends_on:
      - tradestation-app
    networks:
      - tradestation-network
    logging: *default-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production

  # =====================
  # MONITORING - PROMETHEUS
  # =====================
  prometheus:
    image: prom/prometheus:latest
    container_name: tradestation-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - tradestation-network
    logging: *default-logging
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # =====================
  # MONITORING - GRAFANA
  # =====================
  grafana:
    image: grafana/grafana:latest
    container_name: tradestation-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - tradestation-network
    logging: *default-logging
    profiles:
      - monitoring

  # =====================
  # LOG AGGREGATION - ELASTICSEARCH
  # =====================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: tradestation-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - tradestation-network
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - logging

  # =====================
  # LOG VISUALIZATION - KIBANA
  # =====================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: tradestation-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - tradestation-network
    logging: *default-logging
    profiles:
      - logging

  # =====================
  # BACKUP SERVICE
  # =====================
  backup:
    image: alpine:latest
    container_name: tradestation-backup
    restart: "no"
    volumes:
      - mongo-data:/data/mongo:ro
      - redis-data:/data/redis:ro
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - tradestation-network
    entrypoint: ["/backup.sh"]
    profiles:
      - backup

# =====================
# NETWORKS
# =====================
networks:
  tradestation-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =====================
# PERSISTENT VOLUMES
# =====================
volumes:
  mongo-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/mongo
      o: bind
  
  mongo-config:
    driver: local
  
  redis-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/redis
      o: bind
  
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/prometheus
      o: bind
  
  grafana-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/grafana
      o: bind
  
  elasticsearch-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/elasticsearch
      o: bind
